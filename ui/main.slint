import { Button } from "std-widgets.slint";
component HotkeySelect inherits Rectangle {
    property<bool> selecting: false;
    in property<string> binding;
    in property<string> key;
    callback reg(string);
    GridLayout {
        padding-left: 20px;
        padding-top: 10px;
        Text {
            visible: selecting;
            width: self.visible ? 250px : 0;
            vertical-alignment: center;
            font-size: 18px;
            text: "Press a key to select";
            fs := FocusScope {
                key-pressed(event) => {
                    selecting = false;
                    reg(event.text);
                    reject
                }
                focus-changed-event => {
                    selecting = fs.has-focus;
                }
            }
        }

        Text {
            vertical-alignment: center;
            font-size: 18px;
            width: self.visible ? 250px : 0;
            visible: !selecting;
            text: "Vote "+binding+":    "+key;
        }
        

        btn := Button {
            text: "Set Key";
            clicked => {
                selecting = true;
                fs.focus();
            }
        }
    }
}
export component MainWindow inherits Window {
    title: "Vermintwitch";
    icon: @image-url("../assets/vt.png");
    width: 400px;
    height: 400px;
    in property <[string]> bindings: ["#A", "#B", "#C", "#D", "#E"];
    in property <[string]> keys: ["unbound", "unbound", "unbound", "unbound", "unbound"];
    callback reg(string);
    VerticalLayout {
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 10px;
        alignment: start;
        Image {
            source: @image-url("../assets/logo_small.png");
            width: 380px;
        }
        Rectangle {
            height: 10px;
        }
        for bind[i] in bindings: HotkeySelect {
            binding: bind;
            key: keys[i];
            reg(str) => {
                reg(str);
            }
        }
    }
}